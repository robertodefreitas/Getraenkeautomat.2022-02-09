@startuml
'https://plantuml.com/class-diagram

'CONFIG
skinparam enum {
    backgroundColor LightGray
}


title
 Klassendiagramm
 <i>Domain Model</i>
end title

+class Getraenkeautomat <root> {
'beide werden im Klassendiagramm nicht geschrieben, weil die 1.. beziehung das schon zeigt
'also, es ist klar dass die vorhanden sind
'warenbestand
'geldbestand
'+GetraenkUndWechselgeld kaufen(Getraenkewunsch auswahl, Muenze... einzahlung)
+kaufen()
+abziehenMuenzenVonMuenzfaecher()
+kaufenErfolgreichAbschliessen()
+kaufenFehlerhaft()
+pruefenEinzahlungBetragAusreichend()
+pruefenMuenzenFuerWechselgeldAusreichend()
+wechselgeldBerechnenMuenze()
+befuelleGetraenkefach()
+befuelleMuenzfach()
+entleereGetraenkefaecher()
+entleereMuenzfaecher()
+summeAlleGetraenkeMitName()
+summeAlleGetraenkeInGetraenkefach()
+summeAlleMuenzenCentsKasse()
}


'WAREN

+class Warenbestand <waren> {
'-getraenkefaecher: List<Getraenkefach>
+neuesGetraenkefach()
+waehlenGetraenkefach()
+pruefenGetraenkewunschVorhanden()
+pruefenEinzahlungBetragAusreichend()
+bekommenGetraenkepreis()
+getraenkAusgeben()
+befuelleGetraenkefach()
+befuelleGetraenkefaecher()
+summeAlleGetraenkeMitName()
+summeAlleGetraenkeInGetraenkefach()
}

+class Getraenkefach <waren> {
-fachNummer: Integer
'-getraenke: List<Getraenk>
-maxGetraenkeAnzhal: Integer
-preis: Integer
+getraenkKonsumieren()
+isGetraenkefachLeer()
+isGetraenkefachVoll()
}

+class Getraenk <waren> {
-name: String
}


'KASSE

+class Geldbestand <kasse> {
'-muenzfaecher: List<Muenzfach>
+hinzufuegenMunzeInMuenzfach()
+befuelleMuenzfaecher()
+abziehenMunzeVonMuenzfach()
+abziehenMuenzenVonMuenzfaecher()
+entleereMuenzfaecher()
+summeAlleMuenzenCents()
+umwandelnCents2Muenzen()
+umwandelnMuenzen2Cents()
+pruefenMunzfachLeer()
+pruefenMuenzenFuerWechselgeldAusreichend()
}

+class Muenzfach <kasse> {
-fachNummer: Muenztyp
'-muenzen: List<Muenze>
-maxMuenzenAnzahl: Integer
+erstellenMuenzfach()
+isMuenzfachLeer()
+isMuenzfachVoll()
}

+class Muenze <kasse> {
-muenze: Muenztyp
}


'OHNE_BEZIEHUNG

+class GetraenkUndWechselgeld <DTO> {
-getraenk: Getraenk
-wechselgeld: List<Muenze>
-fehler: String
+kaufenErfolgreich()
+kaufenFehlerhaft()
}

+class Getraenkewunsch <DTO> {
-fachNummer: Integer
}

+enum Muenztyp <kasse> {
ZWEI_EURO
EIN_EURO
FUENZIG_CENT
ZWANZIG_CENT
ZEHN_CENT
'-cent : Integer
+ {static} summeAlleMuenzenCents()
+ {static} umwandelnCents2Muenzen()
+ {static} umwandelnMuenzen2Cents()
}


'BEZIEHUNGEN
'https://info-wsf.de/assoziation-aggregation-und-komposition/
'https://www.geeksforgeeks.org/association-composition-aggregation-java/
'Komposition
'Class --* Composition
'Aggregation
'Class --o Aggregation
'Assoziation
'Class --> Association
'Class --|> Extension

'-down->
'-right->
'-left->
'-up->
'-[dotted]->
Getraenkeautomat "1" *-down-> "1" Warenbestand
' manchmal die name der variable sagt etwas über die Beziehung
' hier getraenkefaecher ist sehr ähnlich wie die nahme der Klasse
' deswegen lassen wir weg
'Warenbestand "1" -down-> "1..* (1..n)" Getraenkefach : getraenkefaecher (ist sortiert in)
Warenbestand "1" -down-> "1..* (1..n)" Getraenkefach : ist sortiert in
'Getraenkefach "1" -down-> "0..* (0..n)" Getraenk : getraenke (lagert)
Getraenkefach "1" -down-> "0..* (0..n)" Getraenk : lagert

Getraenkeautomat "1" *-down-> "1" Geldbestand
'Geldbestand "1" -down-> "5" Muenzfach : muenzen (ist sortiert in)
Geldbestand "1" -down-> "5" Muenzfach : ist sortiert in
'Muenzfach "1" -down-> "0..* (0..n)" Muenze : muenze (lagert)
Muenzfach "1" -down-> "0..* (0..n)" Muenze : lagert
Muenze::muenze -[dotted]-> Muenztyp
Muenzfach::fachNummer -[dotted]-> Muenztyp

@enduml